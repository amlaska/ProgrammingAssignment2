getmatrix = getmatrix)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(mean) m <<- mean
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
?matrix
y<-c(1,2,3,4)
x<-matrix(y,2,2)
x
makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
}
test<-cacheSolve(x)
test<-cacheSolve(x)
test<-cacheSolve(x)
test<-cacheSolve(x)
test<-cacheSolve(x)
test<-cacheSolve(x)
test<-cacheSolve(x)
test<-cacheSolve(x)
test<-cacheSolve(x)
test<-cacheSolve(x, mode)
a<-makeCacheMatrix()
a$set(matrix(1:4, 2, 2))
cacheSolve(a)
m
a
test<-cacheSolve(a)
a
a<-makeCacheMatrix()
a$set(matrix(1:4, 2, 2))
test<-cacheSolve(a)
test
a$set
a
retest<-cacheSolve(a)
retest
a$set(matrix(1:4, 2, 2))
a$set
my_matrix<-matrix(1:4, 2, 2)
my_matrix
solve(my_matrix)
a<-makeCacheMatrix()
a$set(matrix(1:4, 2, 2))
test<-cacheSolve(a)
test
a<-makeCacheMatrix()
a$set(matrix(1:4, 2, 2))
test<-cacheSolve(a)
test
a<-makeCacheMatrix()
a$set(matrix(1:4, 2, 2))
test<-cacheSolve(a)
test
a<-makeCacheMatrix()
a$set(matrix(1:4, 2, 2))
test<-cacheSolve(a)
test
?<<-
<<-
?list
